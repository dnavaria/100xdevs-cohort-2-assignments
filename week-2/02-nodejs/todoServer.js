/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("node:fs/promises");

const TODOS_DB = "todos.json";

const app = express();

app.use(bodyParser.json());

app.get("/", (req, res) => {
  res.json({
    message: "Todo API Server",
    exception: null,
  });
});

app.get("/todos", async (req, res) => {
  try {
    const todoData = await fs.readFile(TODOS_DB, "utf-8");
    res.json({
      todos: JSON.parse(todoData),
      exception: null,
      message: "Todo list",
    });
  } catch (error) {
    res.status(500).json({
      todos: [],
      exception: error,
      message: "Todo list not found",
    });
  }
});

app.post("/todos", async (req, res) => {
  try {
    let todoData = await fs.readFile(TODOS_DB, "utf-8");
    todoData = JSON.parse(todoData);

    let body = req.body;

    const todo = {
      id: todoData.length + 1,
      title: body.title,
      description: body.description,
    };

    todoData.push(todo);

    await fs.writeFile(TODOS_DB, JSON.stringify(todoData));

    res.json({ exception: null, message: "Todo created" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ exception: error, message: "Failed to add Todo" });
  }
});

app.get("/todo/:id", async (req, res) => {
  try {
    let todoData = await fs.readFile(TODOS_DB, "utf-8");
    todoData = JSON.parse(todoData);
    const todo = todoData.filter((value) => {
      return value.id == req.params.id;
    });
    if (todo.length == 0) {
      res.status(404).json({ todo: null, exception: null, message: "Todo not found" });
    }
    res.json({ todo: todo, exception: null, message: "Todo found" });
  } catch (error) {
    res
      .status(500)
      .json({ exception: error, todo: null, message: "Todo not found" });
  }
});

app.put("/todo/:id", async (req, res) => {
  try {
    let todoData = await fs.readFile(TODOS_DB, "utf-8");
    todoData = JSON.parse(todoData);
    for (let i = 0; i < todoData.length; i++) {
      if (todoData[i].id == req.params.id) {
        todoData[i].title = req.body.title;
        todoData[i].description = req.body.description;
      }
    }
    await fs.writeFile(TODOS_DB, JSON.stringify(todoData));
    res.json({ exception: null, message: "Todo updated" });
  } catch (error) {
    res
      .status(500)
      .json({ exception: error, message: "Failed to update Todo" });
  }
});

app.delete("/todo/:id", async (req, res) => {
  try {
    const todoData = await fs.readFile(TODOS_DB, "utf-8");
    const todo = JSON.parse(todoData);
    const newTodo = todo.filter((value) => {
      return value.id != req.params.id;
    });
    await fs.writeFile(TODOS_DB, JSON.stringify(newTodo));
    res.json({ exception: null, message: "Todo deleted" });
  } catch (error) {
    res.status(500).json({ exception: error, message: "Failed to delete Todo" });
  }
});

app.listen(9999, () => {
  console.log("Todo Server running..");
});

module.exports = app;
